#!/usr/bin/env bash

set -euo pipefail

_get_jira_ticket_for_description () {
  local url="$JIRA_URL/rest/api/latest/issue/$1"
  local summary=$(curl -s -u $JIRA_USERNAME:$JIRA_PASSWORD $url | jq -M -r '.fields.summary')
  if [[ -n "$summary" ]]; then
    git config branch.$2.description "$summary"
    [[ -n "$(type -p 'git-branches')" ]] && echo && git branches
  fi
}

_print_usage () {
  printf "Usage:  git feature <ticket_id>\n"
  printf "\tThis script uses \$JIRA_USERNAME, \$JIRA_PASSWORD, and \$JIRA_URL environment variables. An optional\n"
  printf "\t\$JIRA_PREFIX variable can be set for your JIRA project prefix so that you can simply provide the ticket\n"
  printf "\tnumber as the only argument to this script. If \$JIRA_PREFIX is not used then you must provide the full\n"
  printf "\tticket name (e.g., XYZ-1234). \$JIRA_PREFIX should just be letters without a dash.\n"
}

[[ $# -ne 1 ]] && _print_usage && exit 0
[[ -z "$(type -t jq)" ]] && printf "jq is required to parse the response from JIRA.\n" && exit 0
if [[ "$1" =~ ^[A-Z]*-?[0-9]+$ ]]; then
  br="$1"
  [[ -z "$JIRA_USERNAME" || -z "$JIRA_PASSWORD" || -z "$JIRA_URL" ]] && _print_usage && exit 1
  if [[ -n "$JIRA_PREFIX" ]] && ! [[ "$br" =~ ^[A-Z]+-[0-9]+$ ]]; then
    br="$(echo $JIRA_PREFIX | tr '[:upper:]' '[:lower:]')-$br"
  fi
  brp="$br"
  if [[ -n "$BRANCH_PREFIX" ]]; then
    brp="$BRANCH_PREFIX/$br"
  fi
  if [[ "$(git branch --all | grep $brp)" == "$brp" ]]; then
    [[ -n "$(git config branch.$brp.description)" ]] && printf "$brp already exists and has a description.\n" && exit 0
    read -e -r -p "$brp exists without a description. Try to get its JIRA summary? [y/n]: " choice && printf "\n"
    [[ "$choice" =~ ^y|Y ]] && _get_jira_ticket_for_description "$br" "$brp"
  else
    git fetch
    git checkout -b "$brp" origin/HEAD
    git push -u origin "$brp"
    _get_jira_ticket_for_description "$br" "$brp"
  fi
else
  _print_usage
fi
