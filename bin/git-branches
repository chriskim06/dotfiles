#!/usr/bin/env bash

set -euo pipefail

#
# print branches with their descriptions
#

if [[ $# -gt 0 ]]; then
  if [[ "$1" =~ ^-?(d|D) ]]; then
    branch_array=($(git branch --list | grep -v "\*\|^..\(main\|master\|develop\)$" | sed 's/^..//'))
    branch_list=''
    count=0
    for i in "${branch_array[@]}"; do
      branch_list+="$count $(printf ' %.0s' $(seq 1 $((4 - ${#count})))) $i \e[38;5;255m$(git config branch.$i.description)\e[0m\n"
      count=$((count + 1))
    done
    count=$((count - 1))
    printf "$branch_list"
    printf "\n# Enter the numbers of branches you want to delete separated by spaces. You may also add an"
    printf "\n# exclamation mark after a number if you want to delete it at origin too (e.g., 0 3! 6 7 9!).\n\n"
    read -er -a choices -p "    > " && printf "\n"
    [[ "${choices[@]}" =~ [:alpha:] ]] && printf "Letters are not allowed\n" && exit 0
    invalid=''
    choice_names=()
    for i in "${choices[@]}"; do
      if [[ "$i" =~ ^[0-9]+\!$ ]]; then
        index="${i::-1}"
        [[ $index -gt $count ]] && invalid+="$i " && continue
        choice_names+=("$(printf "$branch_list" | grep "^$index ") [!]")
      elif [[ "$i" =~ ^[0-9]+$ ]]; then
        [[ $i -gt $count ]] && invalid+="$i " && continue
        choice_names+=("$(printf "$branch_list" | grep "^$i ")")
      else
        invalid+="$i "
      fi
    done
    [[ -z "${choice_names[@]}" ]] && printf "Invalid branch choices\n" && exit 0
    [[ -n "$invalid" ]] && printf "# Skipping invalid branch choices: $invalid"
    printf "\n# Are you sure you want to delete the following branches?\n"
    printf "\t%s\n" "${choice_names[@]}"
    read -erp "  Confirm [y/n]: " confirm && printf "\n"
    [[ ! "$confirm" =~ ^y|Y ]] && printf "Not deleting branches\n" && exit 0
    branch_local=''
    branch_origin=''
    for i in "${choices[@]}"; do
      if [[ "$i" =~ ^[0-9]+\!$ ]]; then
        index="${i::-1}"
        [[ $index -gt $count ]] && continue
        br="${branch_array[$index]}"
        git branch -d "$br"
        [[ "$?" -ne 0 ]] && branch_local+="\n$br"
        git push origin --delete "$br"
        [[ "$?" -ne 0 ]] && branch_origin+="\n$br"
      elif [[ "$i" =~ ^[0-9]+$ ]]; then
        [[ $i -gt $count ]] && continue
        git branch -d "${branch_array[$i]}"
        [[ "$?" -ne 0 ]] && branch_local+="\n$br"
      fi
    done
    [[ -n "$branch_local" ]] && printf "Failed to delete the following branches locally:$branch_local\n"
    [[ -n "$branch_origin" ]] && printf "Failed to delete the following branches from origin:$branch_origin\n"
  else
    printf "# This command lists your branches and their descriptions next to them.\n"
    printf "# usage: git branches [-d|-h]\n# \t[-d]: Interactively delete your branches\n# \t[-h]: Print help text\n"
  fi
else
  current=$'\u276f'
  if [[ "$(uname)" == "Darwin" ]]; then
    current="$(echo -e '\u276f')"
  fi
  while read -r branch; do
    clean_branch_name="${branch//\*\ /}"
    description=$(git config branch.$clean_branch_name.description || echo "")
    branch_len=${#clean_branch_name}
    description_len=${#description}
    remaining_len=$((80 - branch_len - 4)) # max line width - branch name length - 3 (for the padding around branch) - 1 (for ellipses)
    if [[ $description_len -gt $remaining_len ]]; then
      ellipses=$'\u2026'
      if [[ "$(uname)" == "Darwin" ]]; then
        ellipses="$(echo -e '\u2026')"
      fi
      description="${description:0:$remaining_len}${ellipses}"
    fi
    if [[ "${branch::1}" == "*" ]]; then
      printf "$current \e[38;5;10m$clean_branch_name\e[0m \e[38;5;255m$description\e[0m\n"
    else
      printf "  $branch \e[38;5;255m$description\e[0m\n"
    fi
  done <<< "$(git branch --list)"
fi
