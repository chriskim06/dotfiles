#!/usr/bin/env bash

set -euo pipefail

git fetch --all --prune --quiet
branches=$(git branch -r | awk "{print \$1}" | ggrep -E -v -f /dev/fd/0 <(git branch -vv | grep origin) | awk "{print \$1}")

if [[ -z "$branches" ]]; then
  echo "no local branches without a remote"
fi

if [[ $# -eq 1 ]]; then
  formatted_branches="$(echo "$branches" | awk '{ print "  - " $0; }')"
  if [[ "$1" == "-d" ]]; then
    printf "Delete the following branches:\n%s\n\n" "$formatted_branches"
    read -erp "Confirm [y/n]: " confirm && printf "\n"
    [[ ! "$confirm" =~ ^y|Y ]] && printf "Not deleting branches\n" && exit 0
    echo "$branches" | xargs git branch -D
    exit 0
  elif [[ "$1" == "-D" ]]; then
    printf "Deleting the following branches:\n%s\n" "$formatted_branches"
    echo "$branches" | xargs git branch -D
    exit 0
  fi
fi

echo "$branches" | while read -r branch; do
  description=$(git config "branch.$branch.description" || echo "")
  if [[ -n "$description" ]]; then
    branch_len=${#branch}
    description_len=${#description}
    remaining_len=$((80 - branch_len - 1))
    if [[ $description_len -gt $remaining_len ]]; then
      ellipses=$'\u2026'
      if [[ "$(uname)" == "Darwin" ]]; then
        ellipses="$(echo -e '\u2026')"
      fi
      description="${description:0:$remaining_len}${ellipses}"
    fi
  fi
  printf '%s %b\n' "$branch" "\033[1m$description\033[0m"
done
